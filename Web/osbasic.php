<?php
// OSbasics Copyright 2014 by WebIS Spring 2014 License Apache 2.0
echo "OSBasics\n";

// Problem 1: Write simple TDD using assert.

//assert(FALSE);
assert(TRUE);

// Problem 2: Test if two strings are equal, return TRUE if equal, FALSE if not.
// tddStringEquals("One","One") returns TRUE
// tddStringEquals("One","Two") returns FALSE

function tddStringEquals($a,$b){
	return $a===$b;
}

assert(tddStringEquals("One","One")===TRUE);
assert(tddStringEquals("One","Two")===FALSE);

// Problem 3: Refactor so function does the assert instead
// tddAssertStringEquals()

function tddAssertStringEquals($a,$b){
	assert($a===$b);
}

tddAssertStringEquals("One","One");
// tddAssertStringEquals("One","Two"); // Fails

// This is not so useful, poor errors.

// Problem 3: Refactor tddAssertStringEquals to assertEquals and assertNotEquals and throws an exception
// use $expected and $result for args.

function assertEquals($expected,$result) {
	if(!($expected===$result)){
		$message="assertEquasl: |$expected|$result|\n";
		throw new Exception($message); 
	}
}

function assertNotEquals($expected,$result) {
	if(($expected===$result)){
		$message="assertNoeEquasl: |$expected|$result|\n";
		throw new Exception($message); 
	}
}

assertEquals("One","One");
assertNotEquals("One","Two");

// Problem 4: Test Failure with try and catch block

$failed=FALSE;
try {
	assertNotEquals("One","One"); // Fails
} catch (Exception $e){
	// print "Caught Exception";
	assert(is_a($e,'Exception'));
	$failed=TRUE;
}
assert($failed);

// TDD is now usable.

// Problem 5: Create a function that returns an empty xml OSiL document generated by SimpleXMLElement object
// osil() should return the XML document as a string containing the XML header and <osil/>
// SimpleXMLElement is a class, look at the asXML method to return the string.
// Use the XML heredoc for the expected result

function osil() {
	$xml=new SimpleXMLElement('<osil/>');
	return $xml->asXML();
}

$xml=<<<XML
<?xml version="1.0"?>
<osil/>

XML;

assertEquals($xml,osil());

// Problem 6: Write assertContainsString($needle,$haystack)

function assertContainsString($needle,$haystack){
	if(strpos($haystack,$needle)===FALSE){
		$message="assertContainsString: |$needle|$haystack|";
		throw new Exception($message);
	}
}

assertContainsString('Needle','HayStack Needle Hay Hay');
$failed=FALSE;
try {
  assertContainsString('Needle','All hay'); // Fails
} catch (Exception $e) {
	$failed=TRUE;
}
assert($failed);

// Problem 7: The haystack can be an array of strings

function assertContains($needle,$haystack){
	if(is_string($haystack)){
		return assertContainsString($needle,$haystack);
	}
	foreach($haystack as $hay)
	if(strpos($hay,$needle)!==FALSE){
		return;
	}
	$message="assertContains: |$needle|$haystack|";
	throw new Exception($message);
}

assertContains('Needle',array('HayStack Needle Hay Hay','Hay'));


// Problem 7: Run "OSSolverService -h" make sure it returns 0 and contains the string "OS Version: 2."
// use the exec function
// The program in ..\\..\\..\\bin\\OSSolverService.exe

// Make sure to test failure first.

exec("..\\..\\..\\bin\\OSSolverService.exe -h",$output,$result);
//print_r($output);
assertEquals(0,$result);
assertContains("OS Version: 2.",$output);

// Problem 8: Save the xml to test.xml and read it back to test it.
// reimplement osil() as a write() function.
// read

function write($file) {
	$xml=new SimpleXMLElement('<osil/>');
	return $xml->asXML($file);
}

write("test.xml");
$xml=file_get_contents("test.xml");
// print_r($xml);
assertContains('<osil/>',$xml);

// Problem 9: Create a function solve() "OSSolverService -osil test.xml" that throws an exception on failure
// Assume test.xml is there.
// Our problem should return a result of nonzero since it is not well formed.
// Actually it crashes.

function solve(){
	exec("..\\..\\..\\bin\\OSSolverService.exe -osil test.xml -osrl solution.xml",$output,$result);
	//print_r($output);
	if($result!==0){
		$message="solve: error $result\n".implode("\n",$output);
		throw new Exception($message);
	}
}

$failed=FALSE;
try {
	solve();
} catch (Exception $e){
	//print $e;
	$failed=TRUE;
};
assert($failed);

// Problem 10:
// Generate a minimal osil document and solve() it
// <osil><instanceHeader/><instanceData><objectives><obj numberOfObjCoef="0"/></objectives></instanceData></osil>

$xml=new SimpleXMLElement('<osil/>');
$xml->addChild('instanceHeader');
$xml->addChild('instanceData')->addChild('objectives')->addChild('obj')->addAttribute('numberOfObjCoef',0);

//print $xml->asXML();
$xml->asXML('test.xml');
solve();

// Problem 11:
// Detect an error and report it.

// Problem 12: Verify the minimal solution() status is "optimal" and 0, return FALSE if not optimal. 
// write the output in solve() to soution.xml with the "-osrl solution.xml" switch
// parse it with simplexml_load_file
// print_r is your friend.
// You must also often cast and simpleXMLElement to a string "(string)"

function solution(){
	solve();
	$osrl=simplexml_load_file('solution.xml');
	//print_r($osil->optimization);
	$result=(string)$osrl->optimization->solution->status->attributes()->type;
	if($result!=='optimal'){
		return FALSE;
	}
	return (int)$osrl->optimization->solution->objectives->values->obj;
}

//assert(solution()===0);

// A bit troublesome since it generates warnings
// Not all that useful as well.

// Problem 13: Refactor solve and solution and fix warnings. Call it solveOsil()
// This generates a warning, the XML emitted is non-conforming, fix.
// The xmlns needs a proper "uri" so we add http:// to the xmlns string.
// New function takes an SimpleXMLElement and returns the solution.
// Write the file to a temporary file using tempnam() in ..\\..\\..\\tmp
// get a file into a string with get_file_contents
// use preg_replace to alter the file.
// remove the files with unlink() when done.

function solveOsil(SimpleXMLElement $osil){
	$osilfile=tempnam('..\\..\\..\\tmp','OS-');
	$osrlfile=tempnam('..\\..\\..\\tmp','OS-');
	$osil->asXML($osilfile);
	exec("..\\..\\..\\bin\\OSSolverService.exe -osil $osilfile -osrl $osrlfile",$output,$result);
	//print_r($output);
	if($result!==0){
		$message="solve: error $result\n".implode("\n",$output);
		throw new Exception($message);
	}
	$xml=file_get_contents($osrlfile);
	//unlink($osilfile);
	//unlink($osrlfile);
	$xml=preg_replace('/"os.optimizationservices.org"/','"http://os.optimizationservices.org"',$xml);
	$osrl=new SimpleXMLElement($xml);
	//print_r($osrl->optimization);
	$result=(string)$osrl->optimization->solution->status->attributes()->type;
	if($result!=='optimal'){
		return FALSE;
	}
	return (int)$osrl->optimization->solution->objectives->values->obj;
}	

assert(solveOsil($xml)===0);


echo "done.\n"

?>
